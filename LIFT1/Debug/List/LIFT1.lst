
AVRASM ver. 2.1.30  C:\Users\Akash\Desktop\codevision\CV AVR\LIFT1\Debug\List\LIFT1.asm Sat Jan 29 18:28:23 2022

C:\Users\Akash\Desktop\codevision\CV AVR\LIFT1\Debug\List\LIFT1.asm(1095): warning: Register r4 already defined by the .DEF directive
C:\Users\Akash\Desktop\codevision\CV AVR\LIFT1\Debug\List\LIFT1.asm(1096): warning: Register r5 already defined by the .DEF directive
C:\Users\Akash\Desktop\codevision\CV AVR\LIFT1\Debug\List\LIFT1.asm(1097): warning: Register r6 already defined by the .DEF directive
C:\Users\Akash\Desktop\codevision\CV AVR\LIFT1\Debug\List\LIFT1.asm(1098): warning: Register r7 already defined by the .DEF directive
C:\Users\Akash\Desktop\codevision\CV AVR\LIFT1\Debug\List\LIFT1.asm(1099): warning: Register r8 already defined by the .DEF directive
C:\Users\Akash\Desktop\codevision\CV AVR\LIFT1\Debug\List\LIFT1.asm(1100): warning: Register r9 already defined by the .DEF directive
C:\Users\Akash\Desktop\codevision\CV AVR\LIFT1\Debug\List\LIFT1.asm(1101): warning: Register r10 already defined by the .DEF directive
C:\Users\Akash\Desktop\codevision\CV AVR\LIFT1\Debug\List\LIFT1.asm(1102): warning: Register r11 already defined by the .DEF directive
C:\Users\Akash\Desktop\codevision\CV AVR\LIFT1\Debug\List\LIFT1.asm(1103): warning: Register r12 already defined by the .DEF directive
C:\Users\Akash\Desktop\codevision\CV AVR\LIFT1\Debug\List\LIFT1.asm(1104): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.29 Evaluation
                 ;(C) Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _currentFloor=R4
                 	.DEF _currentFloor_msb=R5
                 	.DEF _desireFloor=R6
                 	.DEF _desireFloor_msb=R7
                 	.DEF _floor=R8
                 	.DEF _floor_msb=R9
                 	.DEF _count=R10
                 	.DEF _count_msb=R11
                 	.DEF _i=R12
                 	.DEF _i_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000
00002d 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
00002e 003f
00002f 0030
000030 005b
000031 004f      	.DB  0x3F,0x0,0x30,0x0,0x5B,0x0,0x4F,0x0
000032 0066
000033 006d
000034 007d
000035 0007      	.DB  0x66,0x0,0x6D,0x0,0x7D,0x0,0x7,0x0
000036 007f
C:\Users\Akash\Desktop\codevision\CV AVR\LIFT1\Debug\List\LIFT1.asm(1143): warning: .cseg .db misalignment - padding zero byte
000037 0067      	.DB  0x7F,0x0,0x67
                 
                 __GLOBAL_INI_TBL:
000038 0008      	.DW  0x08
000039 0004      	.DW  0x04
00003a 0054      	.DW  __REG_VARS*2
                 
00003b 0013      	.DW  0x13
00003c 0160      	.DW  _Z
00003d 005c      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00003e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003f 94f8      	CLI
000040 27ee      	CLR  R30
000041 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000042 e0f1      	LDI  R31,1
000043 bffb      	OUT  GICR,R31
000044 bfeb      	OUT  GICR,R30
000045 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000046 e08d      	LDI  R24,(14-2)+1
000047 e0a2      	LDI  R26,2
000048 27bb      	CLR  R27
                 __CLEAR_REG:
000049 93ed      	ST   X+,R30
00004a 958a      	DEC  R24
00004b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004f 93ed      	ST   X+,R30
000050 9701      	SBIW R24,1
000051 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000052 e7e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000053 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000054 9185      	LPM  R24,Z+
000055 9195      	LPM  R25,Z+
000056 9700      	SBIW R24,0
000057 f061      	BREQ __GLOBAL_INI_END
000058 91a5      	LPM  R26,Z+
000059 91b5      	LPM  R27,Z+
00005a 9005      	LPM  R0,Z+
00005b 9015      	LPM  R1,Z+
00005c 01bf      	MOVW R22,R30
00005d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005e 9005      	LPM  R0,Z+
00005f 920d      	ST   X+,R0
000060 9701      	SBIW R24,1
000061 f7e1      	BRNE __GLOBAL_INI_LOOP
000062 01fb      	MOVW R30,R22
000063 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000064 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000065 bfed      	OUT  SPL,R30
000066 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000067 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000068 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000069 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006a 940c 006c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;int Z[]={0x3F, 0x30, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67};
                 
                 	.DSEG
                 ;int currentFloor=0;
                 ;int desireFloor;
                 ; int floor=0;
                 ; int count=0;
                 ; int i;
                 ; int j;
                 ;
                 ;
                 ;void main(){
                 ; 0000 000C void main(){
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000D 
                 ; 0000 000E PORTC=0b00001000;
00006c e0e8      	LDI  R30,LOW(8)
00006d bbe5      	OUT  0x15,R30
                 ; 0000 000F DDRC=0b10011101;
00006e e9ed      	LDI  R30,LOW(157)
00006f bbe4      	OUT  0x14,R30
                 ; 0000 0010 
                 ; 0000 0011 PORTD=0b10000000;    //desired floor
000070 e8e0      	LDI  R30,LOW(128)
000071 bbe2      	OUT  0x12,R30
                 ; 0000 0012 DDRD=0b11111111;
000072 efef      	LDI  R30,LOW(255)
000073 bbe1      	OUT  0x11,R30
                 ; 0000 0013 
                 ; 0000 0014 PORTB=0b11011111;
000074 edef      	LDI  R30,LOW(223)
000075 bbe8      	OUT  0x18,R30
                 ; 0000 0015 DDRB=0b00100000;
000076 e2e0      	LDI  R30,LOW(32)
000077 bbe7      	OUT  0x17,R30
                 ; 0000 0016 
                 ; 0000 0017 PORTA=0b00000000;       //current floor
000078 e0e0      	LDI  R30,LOW(0)
000079 bbeb      	OUT  0x1B,R30
                 ; 0000 0018 DDRA=0b01111111;
00007a e7ef      	LDI  R30,LOW(127)
00007b bbea      	OUT  0x1A,R30
                 ; 0000 0019 
                 ; 0000 001A while(1){
                 _0x4:
                 ; 0000 001B 
                 ; 0000 001C PORTA=Z[currentFloor];
00007c 01f2      	MOVW R30,R4
00007d d083      	RCALL SUBOPT_0x0
                 ; 0000 001D 
                 ; 0000 001E if(count==0){
00007e 2c0a      	MOV  R0,R10
00007f 280b      	OR   R0,R11
000080 f491      	BRNE _0x7
                 ; 0000 001F  while((count!=10)&&(PINB.0==1)&&(PINB.1==1)&&(PINB.2==1)&&(PINB.3==1)){
                 _0x8:
000081 d088      	RCALL SUBOPT_0x1
000082 f041      	BREQ _0xB
000083 9bb0      	SBIS 0x16,0
000084 c006      	RJMP _0xB
000085 9bb1      	SBIS 0x16,1
000086 c004      	RJMP _0xB
000087 9bb2      	SBIS 0x16,2
000088 c002      	RJMP _0xB
000089 99b3      	SBIC 0x16,3
00008a c001      	RJMP _0xC
                 _0xB:
00008b c007      	RJMP _0xA
                 _0xC:
                 ; 0000 0020  count++;
00008c 01f5      	MOVW R30,R10
00008d 9631      	ADIW R30,1
00008e 015f      	MOVW R10,R30
                 ; 0000 0021 delay_ms(500);
00008f efa4      	LDI  R26,LOW(500)
000090 e0b1      	LDI  R27,HIGH(500)
000091 d0a8      	RCALL _delay_ms
                 ; 0000 0022   }
000092 cfee      	RJMP _0x8
                 _0xA:
                 ; 0000 0023 }
                 ; 0000 0024 if(count==10){            //default floor
                 _0x7:
000093 d076      	RCALL SUBOPT_0x1
000094 f409      	BRNE _0xD
                 ; 0000 0025  PORTD=Z[1];
000095 d079      	RCALL SUBOPT_0x2
                 ; 0000 0026  floor=1;
                 ; 0000 0027 }
                 ; 0000 0028 if(PINB.0==0){          //sw1 ground_floor
                 _0xD:
000096 99b0      	SBIC 0x16,0
000097 c005      	RJMP _0xE
                 ; 0000 0029  PORTD=Z[0];
000098 91e0 0160 	LDS  R30,_Z
00009a bbe2      	OUT  0x12,R30
                 ; 0000 002A  floor=0;
00009b 2488      	CLR  R8
00009c 2499      	CLR  R9
                 ; 0000 002B }
                 ; 0000 002C if(PINB.1==0){          //sw2 first_floor
                 _0xE:
00009d 9bb1      	SBIS 0x16,1
                 ; 0000 002D  PORTD=Z[1];
00009e d070      	RCALL SUBOPT_0x2
                 ; 0000 002E  floor=1;
                 ; 0000 002F }
                 ; 0000 0030 if(PINB.2==0){            //sw3 seccond_floor
00009f 99b2      	SBIC 0x16,2
0000a0 c006      	RJMP _0x10
                 ; 0000 0031  PORTD=Z[2];
                +
0000a1 91e0 0164+LDS R30 , _Z + ( 4 )
                 	__GETB1MN _Z,4
0000a3 bbe2      	OUT  0x12,R30
                 ; 0000 0032  floor=2;
0000a4 e0e2      	LDI  R30,LOW(2)
0000a5 e0f0      	LDI  R31,HIGH(2)
0000a6 014f      	MOVW R8,R30
                 ; 0000 0033 }
                 ; 0000 0034 if(PINB.3==0){             //sw4 third_floor
                 _0x10:
0000a7 99b3      	SBIC 0x16,3
0000a8 c006      	RJMP _0x11
                 ; 0000 0035  PORTD=Z[3];
                +
0000a9 91e0 0166+LDS R30 , _Z + ( 6 )
                 	__GETB1MN _Z,6
0000ab bbe2      	OUT  0x12,R30
                 ; 0000 0036  floor=3;
0000ac e0e3      	LDI  R30,LOW(3)
0000ad e0f0      	LDI  R31,HIGH(3)
0000ae 014f      	MOVW R8,R30
                 ; 0000 0037 }
                 ; 0000 0038 
                 ; 0000 0039 
                 ; 0000 003A desireFloor=floor;
                 _0x11:
0000af 0134      	MOVW R6,R8
                 ; 0000 003B 
                 ; 0000 003C if((PINB.4==0)||(count==10 )){
0000b0 9bb4      	SBIS 0x16,4
0000b1 c003      	RJMP _0x13
0000b2 d057      	RCALL SUBOPT_0x1
0000b3 f009      	BREQ _0x13
0000b4 c04a      	RJMP _0x12
                 _0x13:
                 ; 0000 003D delay_ms(200);
0000b5 eca8      	LDI  R26,LOW(200)
0000b6 e0b0      	LDI  R27,0
0000b7 d082      	RCALL _delay_ms
                 ; 0000 003E if(desireFloor!=currentFloor){
                +
0000b8 1446     +CP R4 , R6
0000b9 0457     +CPC R5 , R7
                 	__CPWRR 4,5,6,7
0000ba f409      	BRNE PC+2
0000bb c042      	RJMP _0x15
                 ; 0000 003F 
                 ; 0000 0040 if(currentFloor<desireFloor){
                +
0000bc 1446     +CP R4 , R6
0000bd 0457     +CPC R5 , R7
                 	__CPWRR 4,5,6,7
0000be f4d4      	BRGE _0x16
                 ; 0000 0041 
                 ; 0000 0042    for(i=currentFloor;i<=desireFloor;i++){
0000bf 0162      	MOVW R12,R4
                 _0x18:
                +
0000c0 146c     +CP R6 , R12
0000c1 047d     +CPC R7 , R13
                 	__CPWRR 6,7,12,13
0000c2 f0b4      	BRLT _0x19
                 ; 0000 0043 
                 ; 0000 0044    if(i==desireFloor){
                +
0000c3 146c     +CP R6 , R12
0000c4 047d     +CPC R7 , R13
                 	__CPWRR 6,7,12,13
0000c5 f429      	BRNE _0x1A
                 ; 0000 0045    PORTC.0=0;
0000c6 d04f      	RCALL SUBOPT_0x3
                 ; 0000 0046    PORTC.2=0;
                 ; 0000 0047 
                 ; 0000 0048     PORTB.5=1;        //buzzer
                 ; 0000 0049     delay_ms(400);
                 ; 0000 004A     PORTA=Z[i];
0000c7 01f6      	MOVW R30,R12
0000c8 d038      	RCALL SUBOPT_0x0
                 ; 0000 004B     PORTC.4=1;        // door open
0000c9 d052      	RCALL SUBOPT_0x4
                 ; 0000 004C     PORTC.7=0;
                 ; 0000 004D     delay_ms(2000);
                 ; 0000 004E     PORTC.4=0;        // door closed
                 ; 0000 004F     PORTC.7=1;
                 ; 0000 0050     delay_ms(2000);
                 ; 0000 0051     PORTC.4=0;
                 ; 0000 0052     PORTC.7=0;
                 ; 0000 0053     PORTB.5=0;        //buzzer
                 ; 0000 0054     delay_ms(400);
                 ; 0000 0055     count=0;
                 ; 0000 0056     break;
0000ca c00e      	RJMP _0x19
                 ; 0000 0057 
                 ; 0000 0058    }
                 ; 0000 0059    PORTC.0=1;         //  lift on
                 _0x1A:
0000cb 9aa8      	SBI  0x15,0
                 ; 0000 005A    PORTC.2=0;
0000cc 98aa      	CBI  0x15,2
                 ; 0000 005B    delay_ms(2000);
0000cd d061      	RCALL SUBOPT_0x5
                 ; 0000 005C    PORTC.0=0;         // lift stop
                 ; 0000 005D    PORTC.2=0;
                 ; 0000 005E    PORTA=Z[i+1];
0000ce 01d6      	MOVW R26,R12
0000cf 0faa      	LSL  R26
0000d0 1fbb      	ROL  R27
                +
0000d1 59ae     +SUBI R26 , LOW ( - _Z - ( 2 ) )
0000d2 4fbe     +SBCI R27 , HIGH ( - _Z - ( 2 ) )
                 	__ADDW2MN _Z,2
0000d3 91ec      	LD   R30,X
0000d4 bbeb      	OUT  0x1B,R30
                 ; 0000 005F    }
0000d5 01f6      	MOVW R30,R12
0000d6 9631      	ADIW R30,1
0000d7 016f      	MOVW R12,R30
0000d8 cfe7      	RJMP _0x18
                 _0x19:
                 ; 0000 0060    }
                 ; 0000 0061    if(currentFloor>desireFloor){
                 _0x16:
                +
0000d9 1464     +CP R6 , R4
0000da 0475     +CPC R7 , R5
                 	__CPWRR 6,7,4,5
0000db f514      	BRGE _0x37
                 ; 0000 0062    PORTC.0=0;
0000dc 98a8      	CBI  0x15,0
                 ; 0000 0063    PORTC.2=1;
0000dd 9aaa      	SBI  0x15,2
                 ; 0000 0064    for(j=currentFloor;j>=desireFloor;j--){
                +
0000de 9240 0174+STS _j + ( 0 ) , R4
0000e0 9250 0175+STS _j + ( 0 ) + 1 , R5
                 	__PUTWMRN _j,0,4,5
                 _0x3D:
0000e2 d052      	RCALL SUBOPT_0x6
0000e3 15a6      	CP   R26,R6
0000e4 05b7      	CPC  R27,R7
0000e5 f0c4      	BRLT _0x3E
                 ; 0000 0065 
                 ; 0000 0066 
                 ; 0000 0067    if(j==desireFloor){
0000e6 d04e      	RCALL SUBOPT_0x6
0000e7 166a      	CP   R6,R26
0000e8 067b      	CPC  R7,R27
0000e9 f419      	BRNE _0x3F
                 ; 0000 0068    PORTC.0=0;
0000ea d02b      	RCALL SUBOPT_0x3
                 ; 0000 0069    PORTC.2=0;
                 ; 0000 006A 
                 ; 0000 006B     PORTB.5=1; //buzzer
                 ; 0000 006C     delay_ms(400);
                 ; 0000 006D     PORTC.4=1;   // door open
0000eb d030      	RCALL SUBOPT_0x4
                 ; 0000 006E     PORTC.7=0;
                 ; 0000 006F     delay_ms(2000);
                 ; 0000 0070     PORTC.4=0;     // door closed
                 ; 0000 0071     PORTC.7=1;
                 ; 0000 0072     delay_ms(2000);
                 ; 0000 0073     PORTC.4=0;  //door motor stop
                 ; 0000 0074     PORTC.7=0;
                 ; 0000 0075     PORTB.5=0;  //buzzer
                 ; 0000 0076     delay_ms(400);
                 ; 0000 0077     count=0;
                 ; 0000 0078     break;
0000ec c011      	RJMP _0x3E
                 ; 0000 0079 
                 ; 0000 007A    }
                 ; 0000 007B 
                 ; 0000 007C    PORTC.0=0;  // lift move
                 _0x3F:
0000ed 98a8      	CBI  0x15,0
                 ; 0000 007D    PORTC.2=1;
0000ee 9aaa      	SBI  0x15,2
                 ; 0000 007E    delay_ms(2000);
0000ef d03f      	RCALL SUBOPT_0x5
                 ; 0000 007F    PORTC.0=0;    // lift stop
                 ; 0000 0080    PORTC.2=0;
                 ; 0000 0081    PORTA=Z[j-1];
0000f0 91e0 0174 	LDS  R30,_j
0000f2 91f0 0175 	LDS  R31,_j+1
0000f4 9731      	SBIW R30,1
0000f5 d00b      	RCALL SUBOPT_0x0
                 ; 0000 0082 
                 ; 0000 0083 
                 ; 0000 0084 
                 ; 0000 0085    }
0000f6 e7a4      	LDI  R26,LOW(_j)
0000f7 e0b1      	LDI  R27,HIGH(_j)
0000f8 91ed      	LD   R30,X+
0000f9 91fd      	LD   R31,X+
0000fa 9731      	SBIW R30,1
0000fb 93fe      	ST   -X,R31
0000fc 93ee      	ST   -X,R30
0000fd cfe4      	RJMP _0x3D
                 _0x3E:
                 ; 0000 0086 }
                 ; 0000 0087 }
                 _0x37:
                 ; 0000 0088    currentFloor=desireFloor;
                 _0x15:
0000fe 0123      	MOVW R4,R6
                 ; 0000 0089 
                 ; 0000 008A  }
                 ; 0000 008B  // count=0;
                 ; 0000 008C }
                 _0x12:
0000ff cf7c      	RJMP _0x4
                 ; 0000 008D }
                 _0x5C:
000100 cfff      	RJMP _0x5C
                 ; .FEND
                 
                 	.DSEG
                 _Z:
000160           	.BYTE 0x14
                 _j:
000174           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x0:
000101 e6a0      	LDI  R26,LOW(_Z)
000102 e0b1      	LDI  R27,HIGH(_Z)
000103 0fee      	LSL  R30
000104 1fff      	ROL  R31
000105 0fae      	ADD  R26,R30
000106 1fbf      	ADC  R27,R31
000107 91ec      	LD   R30,X
000108 bbeb      	OUT  0x1B,R30
000109 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
00010a e0ea      	LDI  R30,LOW(10)
00010b e0f0      	LDI  R31,HIGH(10)
00010c 15ea      	CP   R30,R10
00010d 05fb      	CPC  R31,R11
00010e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
                +
00010f 91e0 0162+LDS R30 , _Z + ( 2 )
                 	__GETB1MN _Z,2
000111 bbe2      	OUT  0x12,R30
000112 e0e1      	LDI  R30,LOW(1)
000113 e0f0      	LDI  R31,HIGH(1)
000114 014f      	MOVW R8,R30
000115 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000116 98a8      	CBI  0x15,0
000117 98aa      	CBI  0x15,2
000118 9ac5      	SBI  0x18,5
000119 e9a0      	LDI  R26,LOW(400)
00011a e0b1      	LDI  R27,HIGH(400)
00011b c01e      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4:
00011c 9aac      	SBI  0x15,4
00011d 98af      	CBI  0x15,7
00011e eda0      	LDI  R26,LOW(2000)
00011f e0b7      	LDI  R27,HIGH(2000)
000120 d019      	RCALL _delay_ms
000121 98ac      	CBI  0x15,4
000122 9aaf      	SBI  0x15,7
000123 eda0      	LDI  R26,LOW(2000)
000124 e0b7      	LDI  R27,HIGH(2000)
000125 d014      	RCALL _delay_ms
000126 98ac      	CBI  0x15,4
000127 98af      	CBI  0x15,7
000128 98c5      	CBI  0x18,5
000129 e9a0      	LDI  R26,LOW(400)
00012a e0b1      	LDI  R27,HIGH(400)
00012b d00e      	RCALL _delay_ms
00012c 24aa      	CLR  R10
00012d 24bb      	CLR  R11
00012e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
00012f eda0      	LDI  R26,LOW(2000)
000130 e0b7      	LDI  R27,HIGH(2000)
000131 d008      	RCALL _delay_ms
000132 98a8      	CBI  0x15,0
000133 98aa      	CBI  0x15,2
000134 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000135 91a0 0174 	LDS  R26,_j
000137 91b0 0175 	LDS  R27,_j+1
000139 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 _delay_ms:
00013a 9610      	adiw r26,0
00013b f039      	breq __delay_ms1
                 __delay_ms0:
00013c 95a8      	wdr
                +
00013d ee88     +LDI R24 , LOW ( 0x3E8 )
00013e e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
00013f 9701     +SBIW R24 , 1
000140 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
000141 9711      	sbiw r26,1
000142 f7c9      	brne __delay_ms0
                 __delay_ms1:
000143 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   0 r4 :   7 r5 :   4 r6 :   9 r7 :   7 
r8 :   5 r9 :   1 r10:   5 r11:   3 r12:   7 r13:   2 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  21 r27:  17 r28:   1 r29:   1 r30:  65 r31:  13 
x  :   9 y  :   0 z  :   7 
Registers used: 23 out of 35 (65.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   3 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   2 brmi  :   0 brne  :  10 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  12 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   8 cpc   :   8 cpi   :   0 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  22 ld    :   4 ldd   :   0 ldi   :  48 
lds   :   8 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   1 movw  :  16 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   0 out   :  20 pop   :   0 push  :   0 rcall :  22 ret   :   7 
reti  :   0 rjmp  :  20 rol   :   2 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   6 sbic  :   4 sbis  :   5 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   5 std   :   0 sts   :   2 sub   :   0 subi  :   1 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 36 out of 116 (31.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000288    606     42    648   16384   4.0%
[.dseg] 0x000060 0x000176      0     22     22    1024   2.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
